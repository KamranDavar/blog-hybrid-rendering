import { Card, Input, Select, List, Space, Row, Col, Alert } from "antd";
import moment from "moment";
import type {
  GetServerSideProps,
  InferGetServerSidePropsType,
  NextPage,
} from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useEffect, useState } from "react";
import { getCharacters } from "../logic/services/breakingbad";
import {
  character,
  characters,
  searchType,
  sortByType,
  sortFromType,
} from "../logic/types";

const Home: NextPage = ({
  posts,
  error,
}: InferGetServerSidePropsType<typeof getServerSideProps>) => {
  const [list, setList] = useState<characters>(posts);
  const [sortBy, setSortBy] = useState<sortByType>(undefined);
  const [sortFrom, setSortFrom] = useState<sortFromType>(undefined);
  const [search, setSearch] = useState<searchType>(undefined);

  useEffect(() => {
    let sorted = posts.slice(); //TODO  check if better approach exist
    if (sortFrom && sortBy) {
      if (sortBy === "name" || sortBy === "nickname") {
        sorted = sorted.sort(
          (a: character, b: character) =>
            sortFrom * a[sortBy].localeCompare(b[sortBy])
        );
      } else if (sortBy === "birthday") {
        sorted = sorted.sort(
          (a: character, b: character) =>
            sortFrom *
            (moment(a[sortBy]).isSameOrAfter(b[sortBy], "day") ? 1 : -1)
        );
      }
    }
    setList(sorted);
  }, [sortBy, sortFrom]);

  useEffect(() => {
    setList(
      posts.filter((item: character) => {
        if (search !== undefined) {
          return (
            item.name.toLowerCase().includes(search.toLowerCase()) ||
            item.nickname.toLowerCase().includes(search.toLowerCase())
          );
        } else {
          return true;
        }
      })
    );
  }, [search]);

  return (
    <div className="home">
      {error && (
        <Alert message="Error" description={error} type="error" showIcon />
      )}
      <Head>
        <title>Motenro assessment</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Row className="action">
        <Col xs={24} md={12} lg={4} className="p-25">
          <Select
            className="width100"
            onChange={(value) => setSortBy(value)}
            placeholder="sort by"
          >
            <Select.Option value="name">Name</Select.Option>
            <Select.Option value="nickname">Nickname</Select.Option>
            <Select.Option value="birthday">Birthday</Select.Option>
          </Select>
        </Col>
        <Col xs={24} md={12} lg={4} className="p-25">
          <Select
            className="width100"
            onChange={(value) => setSortFrom(value)}
            placeholder="sort from"
          >
            <Select.Option value={1}>Ascending</Select.Option>
            <Select.Option value={-1}>Descending</Select.Option>
          </Select>
        </Col>
        <Col xs={24} md={12} lg={4} className="p-25">
          <Input
            className="width100"
            onChange={(e) => setSearch(e.target.value)}
            placeholder="search"
          />
        </Col>
      </Row>
      <section className="album">
        <List
          grid={{ xs: 1, sm: 2, md: 2, lg: 3, xl: 4, xxl: 4 }}
          dataSource={list}
          renderItem={(item: character) => (
            <List.Item>
              <Card
                hoverable
                cover={
                  <Link href={`/${item.name}`}>
                    <a>
                      <img className="image" alt={item.name} src={item.img} />
                    </a>
                  </Link>
                }
              >
                <Card.Meta
                  title={item.nickname}
                  description={
                    <>
                      <span>{item.name}</span> <br />
                      {item.birthday !== "Unknown" && (
                        <span>was born in: {item.birthday}</span>
                      )}
                    </>
                  }
                />
              </Card>
            </List.Item>
          )}
        />
      </section>
    </div>
  );
};
export const getServerSideProps: GetServerSideProps = async (context) => {
  let posts;
  try {
    posts = await getCharacters();
  } catch (err: any) {
    return {
      props: {
        posts: [],
        error: err?.message,
      },
    };
  }
  return {
    props: {
      posts,
      error: null,
    },
  };
};

export default Home;
