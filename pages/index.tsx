import { Select, List, Row, Col } from "antd";
import { Space, Table, Tag } from "antd";
import type { ColumnsType } from "antd/lib/table";
import type {
  GetServerSideProps,
  InferGetServerSidePropsType,
  NextPage,
} from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { usePosts } from "../logic/hooks/posts";
import { useUsers } from "../logic/hooks/users";
import { getPosts } from "../logic/services/posts";
import { dehydrate, QueryClient, useQuery } from "react-query";
import { post, user } from "../logic/types";
import { LoadingOutlined } from "@ant-design/icons";
import Link from "next/link";

const Home: NextPage = ({}: InferGetServerSidePropsType<
  typeof getServerSideProps
>) => {
  const router = useRouter();
  const { query } = router;
  const posts = usePosts(query);
  const users = useUsers();

  const columns: ColumnsType<post> = [
    {
      title: "Title",
      dataIndex: "title",
      key: "title",
      render:  (_, record) =><Link href={"/"+record.id}>
       <a>{record.title}</a>
      </Link>
       ,
    },

    {
      title: "Action",
      key: "action",
      render: (_, record) => (
        <Space size="middle">
          <Link href={"/" + record.id}>
            <a>View Detail</a>
          </Link>
        </Space>
      ),
    },
  ];

  if (posts.isLoading) {
    return <LoadingOutlined />;
  }
  return (
    <div className="home">
      <Head>
        <title>hybrid-rendering</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Row className="action">
        <Col xs={24} md={12} lg={4} className="p-25">
          <Select
            className="width100"
            onChange={(value) => {
              router.replace(
                {
                  pathname: "/",
                  query: { userId: value },
                },
                undefined,
                { shallow: true }
              );
            }}
            placeholder="filter by author"
          >
            {users?.data?.map((item: user, index) => (
              <Select.Option key={index} value={item.id}>
                {item.name}
              </Select.Option>
            ))}
          </Select>
        </Col>
      </Row>
      <section className="album">
        <Table columns={columns} dataSource={posts?.data} />
        {/* <List
          dataSource={posts?.data}
          renderItem={(item: post) => (
            <List.Item>
              <List.Item.Meta
                title={item.title}
                description={<span>{item.body}</span>}
              />
            </List.Item>
          )}
        /> */}
      </section>
    </div>
  );
};
export const getServerSideProps: GetServerSideProps = async (context) => {
  const queryClient = new QueryClient();
  await queryClient.prefetchQuery(["posts", context.query], getPosts);

  return {
    props: {
      dehydratedState: dehydrate(queryClient),
    },
  };
};

export default Home;
