import { Card, Input, Select, List } from "antd";
import moment from "moment";
import type {
  GetServerSideProps,
  InferGetServerSidePropsType,
  NextPage,
} from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useEffect, useState } from "react";
import { getCharacters } from "../logic/services/breakingbad";
import {
  character,
  characters,
  searchType,
  sortByType,
  sortFromType,
} from "../logic/types";
import styles from "../styles/Home.module.css";

const Home: NextPage = ({
  posts,
}: InferGetServerSidePropsType<typeof getServerSideProps>) => {
  const [list, setList] = useState<characters>(posts);
  const [sortBy, setSortBy] = useState<sortByType>(undefined);
  const [sortFrom, setSortFrom] = useState<sortFromType>(undefined);
  const [search, setSearch] = useState<searchType>(undefined);
  const { Option } = Select;
  const { Item } = List;
  const { Meta } = Card;

  useEffect(() => {
    let sorted = posts.slice(); //TODO  check if better approach exist
    if (sortFrom && sortBy) {
      if (sortBy === "name" || sortBy === "nickname") {
        sorted = sorted.sort();
      } else if (sortBy === "birthday") {
        sorted = sorted.sort(
          (a: character, b: character) =>
            sortFrom *
            (moment(a[sortBy]).isSameOrAfter(b[sortBy], "day") ? 1 : -1)
        );
      }
    }
    setList(sorted);
  }, [sortBy, sortFrom]);
  useEffect(() => {
    setList(
      posts.filter((item: character) => {
        if (search !== undefined) {
          return (
            item.name.toLowerCase().includes(search.toLowerCase()) ||
            item.nickname.toLowerCase().includes(search.toLowerCase())
          );
        } else {
          return true;
        }
      })
    );
  }, [search]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Motenro assessment</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <section>
        <Select style={{ width: 120 }} onChange={(value) => setSortBy(value)}>
          <Option value="name">Name</Option>
          <Option value="nickname">Nickname</Option>
          <Option value="birthday">Birthday</Option>
        </Select>
      </section>
      <section>
        <Select style={{ width: 120 }} onChange={(value) => setSortFrom(value)}>
          <Option value={1}>Ascending</Option>
          <Option value={-1}>Descending</Option>
        </Select>
      </section>
      <section>
        <Input
          style={{ width: 120 }}
          onChange={(e) => setSearch(e.target.value)}
        />
      </section>
      <section>
        <List
          grid={{ xs: 1, sm: 2, md: 3, lg: 4, xl: 5, xxl: 6 }}
          dataSource={list}
          renderItem={(item: character) => (
            <List.Item>
              <Card
                hoverable
                style={{ width: 240 }}
                cover={<img alt={item.name} src={item.img} />}
              >
                <Meta
                  title={item.nickname}
                  description={
                    <>
                      <span>{item.name}</span> <br />
                      {item.birthday !== "Unknown" && (
                        <span>was born in: {item.birthday}</span>
                      )}
                    </>
                  }
                />
              </Card>
            </List.Item>
          )}
        />
      </section>
    </div>
  );
};
export const getServerSideProps: GetServerSideProps = async (context) => {
  const posts = await getCharacters();

  return {
    props: {
      posts,
    },
  };
};

export default Home;
